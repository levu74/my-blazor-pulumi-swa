trigger:
  batch: true
  branches:
    include:
      - main
  paths:
    include:
      - "**/*"
    exclude:
      - README.md
      - "docs/**"
pr: none

variables:
  - name: solution
    value: src/BlazorApp.slnx
  - name: buildPlatform
    value: "Any CPU"
  - name: buildConfiguration
    value: "Release"
  - name: publishLocation
    value: "$(Build.ArtifactStagingDirectory)/publish"

  - group: my-blazor-pulumi-swa.deploy-to-swa

pool:
  name: $(ado.poolName)
  vmImage: $(ado.vmImage)

stages:
  - stage: BuildBlazorApp
    displayName: "Build Blazor App"
    dependsOn: []
    jobs:
      - job: BuildBlazorApp
        displayName: "Build Blazor App"
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "9.x"
              installationPath: "$(Agent.ToolsDirectory)/dotnet"

          - script: |
              dotnet build $(solution) --configuration $(buildConfiguration)
            displayName: "Build Solution"

          - script: |
              dotnet publish $(solution) --configuration $(buildConfiguration) --output $(publishLocation)
            displayName: "Publish Blazor App"
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: "$(publishLocation)"
              ArtifactName: "BlazorApp"
              publishLocation: "Container"

  - stage: Infrastructure
    displayName: "Deploy Infrastructure"
    dependsOn: []
    jobs:
      - job: PulumiUp
        displayName: "Deploy Infrastructure"
        steps:
          - task: UseDotNet@2
            inputs:
              packageType: "sdk"
              version: "9.x"
              installationPath: "$(Agent.ToolsDirectory)/dotnet"
          - task: Pulumi@1
            inputs:
              azureSubscription: $(ado.azureServiceConnection)
              command: up
              cwd: infra/pulumi/Blazor.Infra.Pulumi
              stack: $(environment)
              args: "--yes"
          - script: |
              pulumi stack select $(environment)
              KEYVAULT_NAME=$(pulumi stack output keyVaultName)
              echo "##vso[task.setvariable variable=keyVaultName;isOutput=true]$KEYVAULT_NAME"
            displayName: "Set stack outputs as variables"
            workingDirectory: infra/pulumi/Blazor.Infra.Pulumi
            name: "setOutputs"

  - stage: Deploy
    displayName: "Deploy Blazor App"
    dependsOn:
      - Infrastructure
      - BuildBlazorApp
    condition: and(succeeded('Infrastructure'), succeeded('BuildBlazorApp'))
    variables:
      keyVaultName: $[ stageDependencies.Infrastructure.PulumiUp.outputs['setOutputs.keyVaultName'] ]
    jobs:
      - job: DeployBlazorApp
        displayName: "Deploy Blazor App"
        steps:
          - checkout: none
          - script: |
              echo "Deploying Blazor App to Static Web Apps"
            displayName: "Deploy Blazor App"
          # Download the published Blazor app artifact
          - download: current
            artifact: BlazorApp
            displayName: "Download Blazor App Artifact"
          - task: AzureKeyVault@2
            displayName: "Get secrets from Key Vault"
            inputs:
              azureSubscription: $(ado.azureServiceConnection)
              KeyVaultName: $(keyVaultName)
              SecretsFilter: "swaDeploymentToken"
              RunAsPreJob: true

          # Check if Docker is available on the agent
          - task: Bash@3
            displayName: "Check for Docker support"
            name: checkDocker
            inputs:
              targetType: "inline"
              script: |
                if command -v docker &> /dev/null; then
                  echo "##vso[task.setvariable variable=dockerAvailable]true"
                else
                  echo "##vso[task.setvariable variable=dockerAvailable]false"
                fi

          # Deploy using AzureStaticWebApp task (requires Docker)
          - task: AzureStaticWebApp@0
            displayName: "Deploy to Static Web Apps (Docker method)"
            condition: eq(variables['dockerAvailable'], 'true')
            inputs:
              azure_static_web_apps_api_token: $(swaDeploymentToken)
              output_location: "$(Pipeline.Workspace)/BlazorApp/wwwroot"
              skip_app_build: true

          # Alternative deployment method using SWA CLI (for agents without Docker)
          - task: NodeTool@0
            displayName: "Install Node.js"
            condition: eq(variables['dockerAvailable'], 'false')
            inputs:
              versionSpec: "20.x"

          - script: |
              set -e
              npm install -g @azure/static-web-apps-cli
              swa deploy --deployment-token $deploymentToken --env production "$(Pipeline.Workspace)/BlazorApp/wwwroot"
            env:
              deploymentToken: $(swaDeploymentToken)
            displayName: "Deploy to Static Web Apps (SWA CLI method)"
            condition: eq(variables['dockerAvailable'], 'false')
